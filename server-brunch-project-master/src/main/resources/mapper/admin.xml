<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.project.brunch.domain.admin.AdminMapper">
  
  	<!-- findByTodayPost : 오늘 올라온 포스팅 목록 뿌리기 -->
  	<select id ="findByTodayPost" resultType="com.project.brunch.domain.post.Post">
	  	SELECT * 
	  	FROM post 
	  	WHERE createDate > curdate( )
  	</select>
  
  	<!-- findByReadCountRank : 포스팅별 조회수 랭킹 뿌리기 -->
  	<select id="findByReadCountRank" resultType="com.project.brunch.web.dto.admin.AdminDto">
  		SELECT p.createDate, p.readCount, p.title, u.nickname
		FROM post p INNER JOIN user u
		ON p.userid = u.id
		order by readCount desc
		limit 5
 	 </select>
 	 
 	 <!-- findBylikeCountRank : 포스팅별 좋아요수 랭킹 뿌리기 -->
  	<select id="findBylikeCountRank" resultType="com.project.brunch.web.dto.admin.AdminDto">
  		SELECT p.title, u.nickname, l.postId, COUNT(l.postId) AS likeCount, p.createDate
		FROM postlike l INNER JOIN post p INNER JOIN user u
		ON p.userid = u.id AND p.Id = l.postId
		GROUP BY postId
		ORDER BY likeCount DESC
		LIMIT 5
 	 </select>
 	 
 	 <!-- 최근업데이트 : admin페이지 최근 업데이트 글 -->
 	 <select id="최근업데이트" resultType="com.project.brunch.web.dto.admin.AdminDto">
  		SELECT p.createDate, p.subtitle, p.title, u.nickname
		FROM post p INNER JOIN user u
		ON p.userid = u.id
		order by p.createDate desc
		limit 5
 	 </select>
 	 
 	 <!-- 관리자메인 : 메인 포스트 가져오기 -->
 	 <select id="메인포스트가져오기" resultType="com.project.brunch.web.dto.admin.AdminDto">
  		SELECT p.createDate, p.subtitle, p.title, u.nickname, p.mainPost
		FROM post p INNER JOIN user u
		ON p.userid = u.id
 	 </select>
 	 
 	 <!-- findByDelUserEmail -->
 	<select id="findByDelUserEmail" resultType="com.project.brunch.domain.user.User">
  		SELECT email From user WHERE id = #{id}
  	</select>
  	
  	<select id="findByUserEmail" resultType="com.project.brunch.domain.user.User">
  		SELECT * FROM user WHERE email =#{email}
 	</select>
 	
 	<!-- 어드민 댓글 리스트 불러오기 -->
 	<select id="CommentList" resultType="com.project.brunch.web.dto.admin.CommentDto">
  		SELECT p.title, c.id, c.createDate, c.content, u.nickName
		FROM comment c INNER JOIN user u INNER JOIN post p
		ON c.userId = u.id AND c.postId = p.id
		ORDER BY p.id DESC
 	</select>
  
    <!-- 메인포스트값변경하기 : true, false -->
  	<update id="메인포스트값변경하기">
  		UPDATE post SET mainPost = #{mainPost}
  		WHERE id =#{id}
 	</update>
  
</mapper>
